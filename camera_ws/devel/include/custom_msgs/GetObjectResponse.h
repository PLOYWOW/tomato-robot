// Generated by gencpp from file custom_msgs/GetObjectResponse.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSGS_MESSAGE_GETOBJECTRESPONSE_H
#define CUSTOM_MSGS_MESSAGE_GETOBJECTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_msgs
{
template <class ContainerAllocator>
struct GetObjectResponse_
{
  typedef GetObjectResponse_<ContainerAllocator> Type;

  GetObjectResponse_()
    : pos_width()  {
      pos_width.assign(0.0);
  }
  GetObjectResponse_(const ContainerAllocator& _alloc)
    : pos_width()  {
  (void)_alloc;
      pos_width.assign(0.0);
  }



   typedef boost::array<double, 4>  _pos_width_type;
  _pos_width_type pos_width;





  typedef boost::shared_ptr< ::custom_msgs::GetObjectResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msgs::GetObjectResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetObjectResponse_

typedef ::custom_msgs::GetObjectResponse_<std::allocator<void> > GetObjectResponse;

typedef boost::shared_ptr< ::custom_msgs::GetObjectResponse > GetObjectResponsePtr;
typedef boost::shared_ptr< ::custom_msgs::GetObjectResponse const> GetObjectResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msgs::GetObjectResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msgs::GetObjectResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msgs::GetObjectResponse_<ContainerAllocator1> & lhs, const ::custom_msgs::GetObjectResponse_<ContainerAllocator2> & rhs)
{
  return lhs.pos_width == rhs.pos_width;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msgs::GetObjectResponse_<ContainerAllocator1> & lhs, const ::custom_msgs::GetObjectResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::GetObjectResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::GetObjectResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::GetObjectResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::GetObjectResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::GetObjectResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::GetObjectResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msgs::GetObjectResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7d5ccf2629aed135906cf9b282336d7f";
  }

  static const char* value(const ::custom_msgs::GetObjectResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7d5ccf2629aed135ULL;
  static const uint64_t static_value2 = 0x906cf9b282336d7fULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msgs::GetObjectResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msgs/GetObjectResponse";
  }

  static const char* value(const ::custom_msgs::GetObjectResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msgs::GetObjectResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[4] pos_width #[x,y,z,grasp_width]\n"
;
  }

  static const char* value(const ::custom_msgs::GetObjectResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msgs::GetObjectResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos_width);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetObjectResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msgs::GetObjectResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msgs::GetObjectResponse_<ContainerAllocator>& v)
  {
    s << indent << "pos_width[]" << std::endl;
    for (size_t i = 0; i < v.pos_width.size(); ++i)
    {
      s << indent << "  pos_width[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pos_width[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSGS_MESSAGE_GETOBJECTRESPONSE_H
